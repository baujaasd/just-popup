let bodyLock, bodyUnlock;

document.addEventListener("DOMContentLoaded", () => {
  const body = document.body,
    html = document.documentElement,
    lockPadding = document.querySelectorAll(".lock_padding");

  let screenDelta = window.innerWidth - html.offsetWidth;

  // üõ†Ô∏è –ü–æ–ª–∏—Ñ–∏–ª–ª –¥–ª—è <dialog>, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
  if (!('HTMLDialogElement' in window)) {
    console.log("–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–∏—Ñ–∏–ª–ª –¥–ª—è <dialog>");

    HTMLDialogElement.prototype.showModal = function () {
      this.setAttribute("open", ""); // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç
      this.style.display = "block"; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ
      this.style.position = "fixed"; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
      this.style.top = "50%";
      this.style.left = "50%";
      this.style.transform = "translate(-50%, -50%)";
      this.style.zIndex = "1000";
      document.body.appendChild(this);
      document.body.classList.add("dialog-open");
    };

    HTMLDialogElement.prototype.close = function () {
      this.removeAttribute("open");
      this.style.display = "none"; // –°–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
      document.body.classList.remove("dialog-open");
    };

    const style = document.createElement("style");
    style.innerHTML = `
      .dialog-open { overflow: hidden; }
      dialog[open] { display: block; }
    `;
    document.head.appendChild(style);
  }

  // üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–∫—Ä–æ–ª–ª–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–ø–∞–ø–∞
  bodyLock = function () {
    screenDelta = window.innerWidth - html.offsetWidth; // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø
    lockPadding.forEach(item => {
      item.style.paddingRight = `${screenDelta}px`;
    });
    body.style.paddingRight = `${screenDelta}px`;
    body.classList.add("lock");
    html.classList.add("lock");
  };

  // üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–∫—Ä–æ–ª–ª–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–ø–∞–ø–∞
  bodyUnlock = function () {
    setTimeout(() => {
      lockPadding.forEach(item => {
        item.style.paddingRight = "0px";
      });
      body.style.paddingRight = "0px";
      body.classList.remove("lock");
      html.classList.remove("lock");
    }, 10);
  };

  // üìå –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–ø–∞–ø–æ–≤ –ø–æ –∫–ª–∏–∫—É
  document.addEventListener("click", (e) => {
    if (e.target.dataset.popup) {
      e.preventDefault();
      togglePopup(e.target.dataset.popup.replace("#", ""));
    } else if (e.target.classList.contains("popup__close-btn") || e.target.classList.contains("popup")) {
      e.preventDefault();
      togglePopup(e.target.closest(".popup.popup--active")?.id);
    }
  });

  // ‚å®Ô∏è –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–ø–∞–ø–∞ –ø–æ ESC
  document.addEventListener("keydown", (e) => {
    if (e.key === "Escape") {
      e.preventDefault();
      const popupWrp = document.querySelector(".popup.popup--active");
      if (popupWrp) {
        togglePopup(popupWrp.id);
      }
    }
  });

});

// üîÑ –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ø–∞–ø–∞
function togglePopup(id, onOpenCallback, onCloseCallback) {
  closeAllPopups(id);
  const popupWrp = document.getElementById(id);
  if (!popupWrp) return false;

  const popup = popupWrp.querySelector(".popup__content");
  const isActive = popupWrp.classList.contains("popup--active");

  if (!isActive) {
    // –ï—Å–ª–∏ —ç—Ç–æ <dialog> –∏ –æ–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º showModal()
    if (popupWrp.showModal) {
      popupWrp.showModal();
    }
    bodyLock();
    if (onOpenCallback) onOpenCallback();
  } else {
    if (popupWrp.close) {
      popupWrp.close();
    }
    bodyUnlock();
    if (onCloseCallback) onCloseCallback();
  }

  popupWrp.classList.toggle("popup--active");
  popup.classList.toggle("popup--active");
  popup.setAttribute('aria-hidden', String(!isActive));

  return true;
}

// ‚ùå –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–ø–∞–ø–æ–≤ –∫—Ä–æ–º–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ
function closeAllPopups(exceptId) {
  const allPopups = document.querySelectorAll('.popup.popup--active');
  allPopups.forEach(popupWrp => {
    if (popupWrp.id !== exceptId) {
      const popup = popupWrp.querySelector('.popup__content');
      if (popupWrp.close) {
        popupWrp.close();
      }
      popupWrp.classList.remove('popup--active');
      popup.classList.remove('popup--active');
      popup.setAttribute('aria-hidden', 'true');
      bodyUnlock();
    }
  });
}
